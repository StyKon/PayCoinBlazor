#pragma checksum "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e45ee0d4c0b9879bc1f41e7432f4fe08057e92a7"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PayCoin.Client.Pages.BackEndAdmin.FileManager
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using PayCoin.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using PayCoin.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using PayCoin.Client.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using PayCoin.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using PayCoin.Client.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/filemanager")]
    public partial class FileManager : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 123 "C:\Users\khali\source\repos\PayCoin\PayCoin\Client\Pages\BackEndAdmin\FileManager\FileManager.razor"
      
    // ImageSelected is an EventCallback that will
    // notify the parent component when an image is selected
    // passing the url of the image to the parent component
    [Parameter] public EventCallback<string> ImageSelected { get; set; }
    private RadzenDataList<FileObject> FileDataList;
    private bool ShowFileManager = false;
    private bool ShowProgressBarPopup = false;
    private bool ShowFolderPopup = false;
    private int progress;
    private string info;
    private string CurrentDirectory = "";
    private string CurrentRoot = "";
    private string NewFolderName = "";
    private FileObject SelectedFile = new FileObject();
    private List<string> Directories = new List<string>();
    private List<FileObject> Files = new List<FileObject>();
    private Dictionary<DateTime, string> events =
        new Dictionary<DateTime, string>();
    protected override void OnInitialized()
    {
        CurrentRoot =
            Path.Combine(HostEnvironment.WebRootPath, "uploads");
        CurrentDirectory = CurrentRoot;
        Directories.Add(CurrentDirectory);
        LoadFiles();
    }
    public void SetShowFileManager(bool paramSetting)
    {
        ShowFileManager = paramSetting;
    }
    //SelectFile
    private async Task SelectFile()
    {
        await ImageSelected.InvokeAsync(SelectedFile.FilePath);
    }
    // Files
    private void SelectImage(FileObject file)
    {
        if (SelectedFile.FileName == file.FileName)
        {
            SelectedFile = new FileObject();
        }
        else
        {
            SelectedFile = file;
        }
    }
    private void LogChange(TreeEventArgs args)
    {
        // Get the current directory from the
        // argument passed to the method
        CurrentDirectory = args.Value as string;
        // Set the RadzenDataList to page 1
        FileDataList.FirstPage();
        // Reload the FileDataList
        LoadFiles();
    }
    private string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }
    private RenderFragment<RadzenTreeItem>
        FileOrFolderTemplate = (context) => builder =>
        {
            string path = context.Value as string;
            bool isDirectory = Directory.Exists(path);
            builder.OpenComponent<RadzenIcon>(0);
            builder.AddAttribute(1,
                "Icon", isDirectory ? "folder" :
                "insert_drive_file");
            if (!isDirectory)
            {
                builder.AddAttribute(2,
                    "Style",
                    "margin-left: 24px");
            }
            builder.CloseComponent();
            builder.AddContent(3, context.Text);
        };
    private void LoadDirectory(TreeExpandEventArgs args)
    {
        CurrentDirectory = args.Value as string;
        // Only get the folders not the files
        args.Children.Data =
            Directory.EnumerateFileSystemEntries(CurrentDirectory)
            .Where(x => !x.Contains("."));
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren =
            (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }
    private void LoadFiles()
    {
        Files = new List<FileObject>();
        var FileNames =
            Directory.EnumerateFileSystemEntries(CurrentDirectory)
            .Where(x => x.Contains("."));
        foreach (var item in FileNames)
        {
            using (var image = Image.FromFile(item))
            {
                // Calculate Thumbnail
                int thumbnailHeight = 100;
                int thumbnailWidth = 100;
                double x = image.Height / 100;
                if (x > 0)
                {
                    thumbnailHeight = Convert.ToInt32(image.Height / x);
                    thumbnailWidth = Convert.ToInt32(image.Width / x);
                }
                Files.Add(new FileObject()
                {
                    FileName =
                    Path.GetFileName(item),
                    FilePath =
                    item.Replace(HostEnvironment.WebRootPath, ""),
                    Height = image.Height,
                    Width = image.Width,
                    ThumbnailHeight = Convert.ToInt32(thumbnailHeight),
                    ThumbnailWidth = Convert.ToInt32(thumbnailWidth)
                });
            }
        }
        // Reset selected file
        SelectedFile = new FileObject();
        // Update UI
        StateHasChanged();
    }
    // Uploading
    private async void OnProgress(UploadProgressArgs args)
    {
        ShowProgressBarPopup = true;
        this.info = $"{args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;
        StateHasChanged();
        if (args.Loaded == args.Total)
        {
            // Delay to give files time to be saved
            // before reloading file view
            await LoadFilesAsync();
        }
    }
    private async Task LoadFilesAsync()
    {
        int Time = 1;
        while (Time > 0)
        {
            Time--;
            StateHasChanged();
            await Task.Delay(1000);
        }
        ShowProgressBarPopup = false;
        LoadFiles();
    }
    // Deleteing
    private void DeleteSelectedFile()
    {
        string RequestedPath = SelectedFile.FilePath;
        RequestedPath =
            RequestedPath.Replace("\\uploads\\", "uploads\\");
        string path = Path.Combine(
            HostEnvironment.WebRootPath,
            RequestedPath);
        if (File.Exists(path))
        {
            File.Delete(path);
            LoadFiles();
        }
    }
    // Folders
    private void AddFolder()
    {
        ShowFolderPopup = true;
    }
    private void CloseFolderPopup()
    {
        ShowFolderPopup = false;
    }
    private void AddFolderName()
    {
        string path = Path.Combine(
            HostEnvironment.WebRootPath,
            CurrentDirectory,
            NewFolderName);
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
            LoadFiles();
        }
        NewFolderName = "";
        ShowFolderPopup = false;
    }
    private void FolderAction(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (item.Value == "Add")
            {
                ShowFolderPopup = true;
            }
            // Delete
            if (item.Value == "Delete")
            {
                if (CurrentDirectory != CurrentRoot)
                {
                    string path = Path.Combine(
                        HostEnvironment.WebRootPath,
                        CurrentDirectory);
                    if (Directory.Exists(path))
                    {
                        Directory.Delete(path, true);
                        CurrentDirectory =
                            HostEnvironment.WebRootPath;
                        LoadFiles();
                    }
                }
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment { get; set; }
    }
}
#pragma warning restore 1591
